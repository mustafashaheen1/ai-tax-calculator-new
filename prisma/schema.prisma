generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())

  accounts      Account[]
  sessions      Session[]
  chatSessions  ChatSession[]
  auditLogs     AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatSession {
  id        String @id @default(cuid())
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User? @relation(fields: [userId], references: [id])
  messages     ChatMessage[]
  calculations Calculation[]
}

model ChatMessage {
  id        String @id @default(cuid())
  sessionId String
  role      String // 'user' or 'assistant'
  content   String
  timestamp DateTime @default(now())
  references String? // JSON string of references

  session ChatSession @relation(fields: [sessionId], references: [id])
}

model Calculation {
  id                    String @id @default(cuid())
  sessionId             String
  inputs                String // JSON string
  estimatedCurrentTax   Float
  estimatedSavings      Float
  recommendedDonation   Float?
  annualPriReturnEst    String? // JSON string
  fiveYearBenefitLow    Float?
  fiveYearBenefitHigh   Float?
  assumptions           String? // JSON string
  stepByStepMath        String?
  calculationSummary    String? // JSON string
  createdAt             DateTime @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id])
}

model AuditLog {
  id        String @id @default(cuid())
  action    String
  userId    String?
  sessionId String?
  data      String? // JSON string
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}
